# .github/workflows/update-particle-configs.yaml
name: Update Particle Device Configurations

on:
  workflow_dispatch:
    inputs:
      config_file:
        description: 'Path to configuration file'
        required: true
        default: 'config.json'
      device_list_file:
        description: 'Path to device list file'
        required: true
        default: 'devices.txt'
      max_retries:
        description: 'Maximum retry attempts per device'
        required: false
        default: '3'
      restart_wait:
        description: 'Seconds to wait for device restart'
        required: false
        default: '30'
      online_timeout:
        description: 'Seconds to wait for device to come online'
        required: false
        default: '120'
      max_concurrent:
        description: 'Maximum concurrent devices to process'
        required: false
        default: '5'
      dry_run:
        description: 'Dry run - validate inputs without making changes'
        required: false
        default: false
        type: boolean
      confirmation:
        description: 'Type "CONFIRM" to proceed with actual updates'
        required: true
        type: string

jobs:
  validate-inputs:
    name: Validate Inputs
    runs-on: ubuntu-latest
    outputs:
      proceed: ${{ steps.validate.outputs.proceed }}
      device_count: ${{ steps.validate-devices.outputs.count }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate confirmation
        id: validate
        run: |
          if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            echo "proceed=true" >> $GITHUB_OUTPUT
          elif [ "${{ github.event.inputs.confirmation }}" = "CONFIRM" ]; then
            echo "proceed=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Update not confirmed. Please type 'CONFIRM' to proceed."
            echo "proceed=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Check files exist
        id: validate-devices
        run: |
          if [ ! -f "${{ github.event.inputs.config_file }}" ]; then
            echo "❌ Configuration file not found: ${{ github.event.inputs.config_file }}"
            exit 1
          fi
          
          if [ ! -f "${{ github.event.inputs.device_list_file }}" ]; then
            echo "❌ Device list file not found: ${{ github.event.inputs.device_list_file }}"
            exit 1
          fi
          
          # Count devices
          if grep -q '^\[' "${{ github.event.inputs.device_list_file }}"; then
            DEVICE_COUNT=$(grep -o ',' "${{ github.event.inputs.device_list_file }}" | wc -l)
            DEVICE_COUNT=$((DEVICE_COUNT + 1))
          else
            DEVICE_COUNT=$(grep -c . "${{ github.event.inputs.device_list_file }}")
          fi
          
          echo "Found $DEVICE_COUNT devices"
          echo "count=$DEVICE_COUNT" >> $GITHUB_OUTPUT

  update-configurations:
    name: Update Device Configurations
    needs: validate-inputs
    if: needs.validate-inputs.outputs.proceed == 'true'
    runs-on: ubuntu-latest
    outputs:
      success-count: ${{ steps.parse-results.outputs.successful }}
      fail-count: ${{ steps.parse-results.outputs.failed }}
      total-count: ${{ steps.parse-results.outputs.total }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          pip install requests
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi

      - name: Run configuration update script
        id: update
        continue-on-error: true
        run: |
          python3 particle_config_updater.py \
            --config "${{ github.event.inputs.config_file }}" \
            --devices "${{ github.event.inputs.device_list_file }}" \
            --token "${{ secrets.PARTICLE_ACCESS_TOKEN }}" \
            --output ./update_results.json \
            --max-retries ${{ github.event.inputs.max_retries }} \
            --restart-wait ${{ github.event.inputs.restart_wait }} \
            --online-timeout ${{ github.event.inputs.online_timeout }} \
            --max-concurrent ${{ github.event.inputs.max_concurrent }} \
            ${{ github.event.inputs.dry_run == 'true' && '--dry-run' || '' }}

      - name: Parse results
        id: parse-results
        if: always()
        run: |
          if [ -f update_results.json ]; then
            TOTAL=$(grep -o '"total_devices":[0-9]*' update_results.json | cut -d: -f2)
            SUCCESSFUL=$(grep -o '"successful":[0-9]*' update_results.json | cut -d: -f2)
            FAILED=$(grep -o '"failed":[0-9]*' update_results.json | cut -d: -f2)
            
            echo "total=${TOTAL}" >> $GITHUB_OUTPUT
            echo "successful=${SUCCESSFUL}" >> $GITHUB_OUTPUT
            echo "failed=${FAILED}" >> $GITHUB_OUTPUT
            
            echo "## Results: ${SUCCESSFUL}/${TOTAL} devices updated successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "total=0" >> $GITHUB_OUTPUT
            echo "successful=0" >> $GITHUB_OUTPUT
            echo "failed=0" >> $GITHUB_OUTPUT
            echo "## ❌ No results file found" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: configuration-update-results-${{ github.run_id }}
          path: |
            update_results.json
            particle_config_update.log
          retention-days: 30

      - name: Check for failures
        if: steps.parse-results.outputs.failed > 0
        run: |
          echo "❌ Configuration update completed with failures"
          exit 1

  create-update-log:
    name: Create Update Log
    needs: [validate-inputs, update-configurations]
    if: always() && needs.validate-inputs.outputs.proceed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download results
        if: always()
        uses: actions/download-artifact@v4
        with:
          name: configuration-update-results-${{ github.run_id }}
          path: ./results

      - name: Create log
        run: |
          mkdir -p logs/configuration-updates
          
          TIMESTAMP=$(date -u '+%Y-%m-%d_%H-%M-%S')
          LOG_FILE="logs/configuration-updates/${TIMESTAMP}_config_update.md"
          
          cat > "$LOG_FILE" << EOF
          # Configuration Update Log
          
          **Timestamp**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          **Triggered By**: @${{ github.actor }}
          **Workflow**: [${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          ## Update Details
          - **Configuration**: ${{ github.event.inputs.config_file }}
          - **Device List**: ${{ github.event.inputs.device_list_file }}
          - **Total Devices**: ${{ needs.update-configurations.outputs.total-count }}
          - **Successful**: ${{ needs.update-configurations.outputs.success-count }}
          - **Failed**: ${{ needs.update-configurations.outputs.fail-count }}
          - **Dry Run**: ${{ github.event.inputs.dry_run }}
          
          ## Results
          EOF
          
          if [ -f "results/update_results.json" ]; then
            echo "" >> "$LOG_FILE"
            echo "<details>" >> "$LOG_FILE"
            echo "<summary>Detailed Results</summary>" >> "$LOG_FILE"
            echo "" >> "$LOG_FILE"
            echo "\`\`\`json" >> "$LOG_FILE"
            cat results/update_results.json >> "$LOG_FILE"
            echo "\`\`\`" >> "$LOG_FILE"
            echo "</details>" >> "$LOG_FILE"
          fi
          
          echo "📝 Log created: $LOG_FILE"

      - name: Commit log
        run: |
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
          git add logs/configuration-updates/
          
          if ! git diff --staged --quiet; then
            git commit -m "📝 Configuration update log - $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
            git push
          fi

  notify-results:
    name: Notify Results
    needs: [validate-inputs, update-configurations]
    if: always() && needs.validate-inputs.outputs.proceed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Success notification
        if: needs.update-configurations.outputs.fail-count == '0'
        run: |
          echo "## ✅ All devices updated successfully!" >> $GITHUB_STEP_SUMMARY
          echo "Updated ${{ needs.update-configurations.outputs.total-count }} devices" >> $GITHUB_STEP_SUMMARY

      - name: Partial success notification
        if: needs.update-configurations.outputs.success-count > 0 && needs.update-configurations.outputs.fail-count > 0
        run: |
          echo "## ⚠️ Partial success" >> $GITHUB_STEP_SUMMARY
          echo "- Successful: ${{ needs.update-configurations.outputs.success-count }}" >> $GITHUB_STEP_SUMMARY
          echo "- Failed: ${{ needs.update-configurations.outputs.fail-count }}" >> $GITHUB_STEP_SUMMARY

      - name: Create issue on failure
        if: needs.update-configurations.outputs.fail-count > 0
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 Configuration update failed - ' + new Date().toISOString().split('T')[0],
              body: `## Configuration Update Failure
              
              **Failed devices**: ${{ needs.update-configurations.outputs.fail-count }}/${{ needs.update-configurations.outputs.total-count }}
              **Configuration**: ${{ github.event.inputs.config_file }}
              **Device list**: ${{ github.event.inputs.device_list_file }}
              **Workflow**: [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
              
              Check the workflow logs and artifacts for detailed error information.`,
              labels: ['configuration-update', 'failure']
            });