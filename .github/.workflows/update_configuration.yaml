# .github/workflows/update-particle-configs.yaml
name: Update Particle Device Configurations

on:
  workflow_dispatch:
    inputs:
      script_repo:
        description: 'Repository containing the update script (owner/repo)'
        required: true
        default: 'RTGS-Lab/gems_sensing_db_tools'
      script_ref:
        description: 'Branch/tag/commit to use from script repository'
        required: false
        default: 'main'
      config_file:
        description: 'Path to configuration file in current repository'
        required: true
        default: 'configs/default.json'
      device_list_file:
        description: 'Path to device list file in current repository'
        required: true
        default: 'devices/production.txt'
      max_retries:
        description: 'Maximum retry attempts per device'
        required: false
        default: '3'
        type: string
      restart_wait:
        description: 'Seconds to wait for device restart'
        required: false
        default: '30'
        type: string
      online_timeout:
        description: 'Seconds to wait for device to come online'
        required: false
        default: '120'
        type: string
      max_concurrent:
        description: 'Maximum concurrent devices to process'
        required: false
        default: '5'
        type: string
      dry_run:
        description: 'Dry run - validate inputs without making changes'
        required: false
        default: false
        type: boolean
      confirmation:
        description: 'Type "CONFIRM" to proceed with actual updates'
        required: true
        type: string

jobs:
  validate-inputs:
    name: Validate Inputs
    runs-on: ubuntu-latest
    outputs:
      proceed: ${{ steps.validate.outputs.proceed }}
      config_valid: ${{ steps.validate-config.outputs.valid }}
      device_count: ${{ steps.validate-devices.outputs.count }}
    steps:
      - name: Checkout current repository
        uses: actions/checkout@v4

      - name: Validate confirmation
        id: validate
        run: |
          if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            echo "✅ Dry run mode - confirmation not required"
            echo "proceed=true" >> $GITHUB_OUTPUT
          elif [ "${{ github.event.inputs.confirmation }}" = "CONFIRM" ]; then
            echo "✅ Update confirmed"
            echo "proceed=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Update not confirmed. Please type 'CONFIRM' to proceed with actual updates."
            echo "proceed=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Check configuration file exists
        id: validate-config
        run: |
          if [ ! -f "${{ github.event.inputs.config_file }}" ]; then
            echo "❌ Configuration file not found: ${{ github.event.inputs.config_file }}"
            echo "valid=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Validate JSON syntax
          if ! python3 -m json.tool "${{ github.event.inputs.config_file }}" > /dev/null; then
            echo "❌ Invalid JSON in configuration file"
            echo "valid=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "✅ Configuration file is valid JSON"
          echo "valid=true" >> $GITHUB_OUTPUT

      - name: Check device list file exists
        id: validate-devices
        run: |
          if [ ! -f "${{ github.event.inputs.device_list_file }}" ]; then
            echo "❌ Device list file not found: ${{ github.event.inputs.device_list_file }}"
            exit 1
          fi
          
          # Count devices (handle both JSON array and line-separated formats)
          if grep -q '^\[' "${{ github.event.inputs.device_list_file }}"; then
            # JSON array format
            DEVICE_COUNT=$(python3 -c "import json; print(len(json.load(open('${{ github.event.inputs.device_list_file }}', 'r'))))")
          else
            # Line-separated format
            DEVICE_COUNT=$(grep -c . "${{ github.event.inputs.device_list_file }}")
          fi
          
          echo "✅ Found $DEVICE_COUNT devices in list"
          echo "count=$DEVICE_COUNT" >> $GITHUB_OUTPUT

      - name: Display update summary
        run: |
          echo "## 📋 Update Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Configuration**: \`${{ github.event.inputs.config_file }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Device List**: \`${{ github.event.inputs.device_list_file }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Device Count**: ${{ steps.validate-devices.outputs.count }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Script Repository**: ${{ github.event.inputs.script_repo }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Script Reference**: ${{ github.event.inputs.script_ref }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Dry Run**: ${{ github.event.inputs.dry_run }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Max Retries**: ${{ github.event.inputs.max_retries }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Restart Wait**: ${{ github.event.inputs.restart_wait }}s" >> $GITHUB_STEP_SUMMARY
          echo "- **Online Timeout**: ${{ github.event.inputs.online_timeout }}s" >> $GITHUB_STEP_SUMMARY
          echo "- **Max Concurrent**: ${{ github.event.inputs.max_concurrent }}" >> $GITHUB_STEP_SUMMARY

  update-configurations:
    name: Update Device Configurations
    needs: validate-inputs
    if: needs.validate-inputs.outputs.proceed == 'true'
    runs-on: ubuntu-latest
    outputs:
      results-artifact: ${{ steps.upload.outputs.artifact-name }}
      success-count: ${{ steps.parse-results.outputs.successful }}
      fail-count: ${{ steps.parse-results.outputs.failed }}
      total-count: ${{ steps.parse-results.outputs.total }}
    steps:
      - name: Checkout current repository
        uses: actions/checkout@v4
        with:
          path: current-repo

      - name: Checkout script repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.inputs.script_repo }}
          ref: ${{ github.event.inputs.script_ref }}
          path: script-repo
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Python dependencies
        run: |
          cd script-repo
          pip install requests
          
          # Install additional dependencies if requirements.txt exists
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi

      - name: Run configuration update script
        id: update
        continue-on-error: true
        run: |
          cd script-repo
          
          # Copy config and device files from current repo
          cp "../current-repo/${{ github.event.inputs.config_file }}" ./config.json
          cp "../current-repo/${{ github.event.inputs.device_list_file }}" ./devices.txt
          
          # Run the update script
          python3 particle_config_updater.py \
            --config ./config.json \
            --devices ./devices.txt \
            --token "${{ secrets.PARTICLE_ACCESS_TOKEN }}" \
            --output ./update_results.json \
            --max-retries ${{ github.event.inputs.max_retries }} \
            --restart-wait ${{ github.event.inputs.restart_wait }} \
            --online-timeout ${{ github.event.inputs.online_timeout }} \
            --max-concurrent ${{ github.event.inputs.max_concurrent }} \
            ${{ github.event.inputs.dry_run == 'true' && '--dry-run' || '' }}

      - name: Parse results
        id: parse-results
        if: always()
        run: |
          cd script-repo
          
          if [ -f update_results.json ]; then
            TOTAL=$(python3 -c "import json; data=json.load(open('update_results.json')); print(data['summary']['total_devices'])")
            SUCCESSFUL=$(python3 -c "import json; data=json.load(open('update_results.json')); print(data['summary']['successful'])")
            FAILED=$(python3 -c "import json; data=json.load(open('update_results.json')); print(data['summary']['failed'])")
            
            echo "total=${TOTAL}" >> $GITHUB_OUTPUT
            echo "successful=${SUCCESSFUL}" >> $GITHUB_OUTPUT
            echo "failed=${FAILED}" >> $GITHUB_OUTPUT
            
            echo "## 📊 Update Results" >> $GITHUB_STEP_SUMMARY
            echo "- **Total Devices**: ${TOTAL}" >> $GITHUB_STEP_SUMMARY
            echo "- **Successful**: ${SUCCESSFUL}" >> $GITHUB_STEP_SUMMARY
            echo "- **Failed**: ${FAILED}" >> $GITHUB_STEP_SUMMARY
            echo "- **Success Rate**: $(python3 -c "print(f'{${SUCCESSFUL}*100//${TOTAL}:.1f}%')")" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ No results file found - script may have failed to start"
            echo "total=0" >> $GITHUB_OUTPUT
            echo "successful=0" >> $GITHUB_OUTPUT
            echo "failed=0" >> $GITHUB_OUTPUT
          fi

      - name: Upload results and logs
        id: upload
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: configuration-update-results-${{ github.run_id }}
          path: |
            script-repo/update_results.json
            script-repo/particle_config_update.log
            current-repo/${{ github.event.inputs.config_file }}
            current-repo/${{ github.event.inputs.device_list_file }}
          retention-days: 30

      - name: Display detailed results
        if: always()
        run: |
          cd script-repo
          
          if [ -f update_results.json ]; then
            echo "## 📄 Detailed Results" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "<details>" >> $GITHUB_STEP_SUMMARY
            echo "<summary>Click to expand detailed results</summary>" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
            cat update_results.json >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "</details>" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Check for failures
        if: steps.update.outcome == 'failure' || steps.parse-results.outputs.failed > 0
        run: |
          echo "❌ Configuration update completed with failures"
          exit 1

  create-update-log:
    name: Create Update Log
    needs: [validate-inputs, update-configurations]
    if: always() && needs.validate-inputs.outputs.proceed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download update results
        if: always()
        uses: actions/download-artifact@v4
        with:
          name: configuration-update-results-${{ github.run_id }}
          path: ./results

      - name: Create update log
        run: |
          # Create logs directory if it doesn't exist
          mkdir -p logs/configuration-updates
          
          # Generate log filename with timestamp
          TIMESTAMP=$(date -u '+%Y-%m-%d_%H-%M-%S')
          LOG_FILE="logs/configuration-updates/${TIMESTAMP}_config_update.md"
          
          # Create comprehensive log
          cat > "$LOG_FILE" << EOF
          # Configuration Update Log
          
          **Timestamp**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')  
          **Triggered By**: @${{ github.actor }}  
          **Workflow Run**: [${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})  
          **Repository**: ${{ github.repository }}  
          
          ## 📋 Update Details
          
          - **Configuration File**: \`${{ github.event.inputs.config_file }}\`
          - **Device List File**: \`${{ github.event.inputs.device_list_file }}\`
          - **Script Repository**: ${{ github.event.inputs.script_repo }}
          - **Script Reference**: ${{ github.event.inputs.script_ref }}
          - **Dry Run**: ${{ github.event.inputs.dry_run }}
          - **Max Retries**: ${{ github.event.inputs.max_retries }}
          - **Restart Wait Time**: ${{ github.event.inputs.restart_wait }}s
          - **Online Timeout**: ${{ github.event.inputs.online_timeout }}s
          
          ## 📊 Results Summary
          
          - **Total Devices**: ${{ needs.update-configurations.outputs.total-count || 'Unknown' }}
          - **Successful Updates**: ${{ needs.update-configurations.outputs.success-count || '0' }}
          - **Failed Updates**: ${{ needs.update-configurations.outputs.fail-count || '0' }}
          - **Success Rate**: $(python3 -c "
          try:
              total = int('${{ needs.update-configurations.outputs.total-count }}' or '0')
              success = int('${{ needs.update-configurations.outputs.success-count }}' or '0')
              if total > 0:
                  print(f'{success*100//total}%')
              else:
                  print('N/A')
          except:
              print('N/A')
          ")
          
          ## ⚙️ Configuration Applied
          
          \`\`\`json
          EOF
          
          # Add configuration content if available
          if [ -f "results/config.json" ]; then
            cat results/config.json >> "$LOG_FILE"
          else
            echo "Configuration file not available" >> "$LOG_FILE"
          fi
          
          cat >> "$LOG_FILE" << EOF
          \`\`\`
          
          ## 📱 Device List
          
          EOF
          
          # Add device list if available
          if [ -f "results/devices.txt" ]; then
            echo "\`\`\`" >> "$LOG_FILE"
            cat results/devices.txt >> "$LOG_FILE"
            echo "\`\`\`" >> "$LOG_FILE"
          else
            echo "Device list not available" >> "$LOG_FILE"
          fi
          
          # Add detailed results if available
          if [ -f "results/update_results.json" ]; then
            cat >> "$LOG_FILE" << EOF
          
          ## 📄 Detailed Results
          
          <details>
          <summary>Click to expand detailed results</summary>
          
          \`\`\`json
          EOF
            cat results/update_results.json >> "$LOG_FILE"
            cat >> "$LOG_FILE" << EOF
          \`\`\`
          
          </details>
          EOF
          fi
          
          # Add log file content if available
          if [ -f "results/particle_config_update.log" ]; then
            cat >> "$LOG_FILE" << EOF
          
          ## 📝 Execution Log
          
          <details>
          <summary>Click to expand execution log</summary>
          
          \`\`\`
          EOF
            cat results/particle_config_update.log >> "$LOG_FILE"
            cat >> "$LOG_FILE" << EOF
          \`\`\`
          
          </details>
          EOF
          fi
          
          echo "📝 Log created: $LOG_FILE"

      - name: Commit update log
        run: |
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
          git add logs/configuration-updates/
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "📝 Configuration update log - $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
            git push
          fi

  notify-results:
    name: Send Notifications
    needs: [validate-inputs, update-configurations, create-update-log]
    if: always() && needs.validate-inputs.outputs.proceed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Determine notification status
        id: status
        run: |
          if [ "${{ needs.update-configurations.result }}" = "success" ] && [ "${{ needs.update-configurations.outputs.fail-count }}" = "0" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "emoji=✅" >> $GITHUB_OUTPUT
          elif [ "${{ needs.update-configurations.outputs.success-count }}" != "0" ]; then
            echo "status=partial" >> $GITHUB_OUTPUT
            echo "emoji=⚠️" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "emoji=❌" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub issue on failure
        if: steps.status.outputs.status == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            const title = `🚨 Configuration Update Failed - ${new Date().toISOString().split('T')[0]}`;
            const body = `
            ## Configuration Update Failure Report
            
            **Configuration File:** \`${{ github.event.inputs.config_file }}\`
            **Device List:** \`${{ github.event.inputs.device_list_file }}\`
            **Script Repository:** ${{ github.event.inputs.script_repo }}
            **Total Devices:** ${{ needs.update-configurations.outputs.total-count || 'Unknown' }}
            **Successful:** ${{ needs.update-configurations.outputs.success-count || '0' }}
            **Failed:** ${{ needs.update-configurations.outputs.fail-count || 'Unknown' }}
            **Triggered By:** @${{ github.actor }}
            **Workflow Run:** [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            ### Troubleshooting Steps
            
            1. **Check Workflow Logs**: Review the detailed execution logs in the workflow run
            2. **Verify Device Connectivity**: Ensure target devices are online and accessible
            3. **Validate Configuration**: Check that the configuration format is correct
            4. **Check Particle API Status**: Verify that Particle Cloud API is operational
            5. **Review Device Firmware**: Ensure devices have compatible firmware with \`updateConfig\` function
            
            ### Next Steps
            
            - [ ] Investigate root cause using workflow logs
            - [ ] Verify device connectivity and health
            - [ ] Check configuration file format and content
            - [ ] Retry update if issue was transient
            - [ ] Update device firmware if needed
            
            **Download Results:** The detailed results and logs are available as artifacts in the workflow run.
            `;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['configuration-update', 'failure', 'automated']
            });

      - name: Send success notification
        if: steps.status.outputs.status == 'success'
        run: |
          echo "## ✅ Configuration Update Successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All ${{ needs.update-configurations.outputs.total-count }} devices were successfully updated with the new configuration." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Configuration:** \`${{ github.event.inputs.config_file }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Device List:** \`${{ github.event.inputs.device_list_file }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered By:** @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY

      - name: Send partial success notification
        if: steps.status.outputs.status == 'partial'
        run: |
          echo "## ⚠️ Configuration Update Partially Successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Some devices were updated successfully, but others failed." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Total Devices:** ${{ needs.update-configurations.outputs.total-count }}" >> $GITHUB_STEP_SUMMARY
          echo "**Successful:** ${{ needs.update-configurations.outputs.success-count }}" >> $GITHUB_STEP_SUMMARY
          echo "**Failed:** ${{ needs.update-configurations.outputs.fail-count }}" >> $GITHUB_STEP_SUMMARY
          echo "**Configuration:** \`${{ github.event.inputs.config_file }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Device List:** \`${{ github.event.inputs.device_list_file }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered By:** @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Check the detailed results in the workflow artifacts for information about failed devices." >> $GITHUB_STEP_SUMMARY